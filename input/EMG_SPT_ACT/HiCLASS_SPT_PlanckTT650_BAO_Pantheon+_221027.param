#-----CLASS v2.7.2 (branch: , hash: )-----
#------Experiments to test (separated with commas)-----
data.experiments=['Planck_highl_TT_max650', 'Planck_lowl_EE', 'Planck_lowl_TT','spt3g_y1','Pantheon_Plus','bao_smallz_2014','bao_boss_dr12']

#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

data.over_sampling=[1,5,5,10]

# Cosmological parameters list
data.parameters['omega_b']      = [  2.2377,   None, None,      0.015, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [ 0.12010,   None, None,     0.0013,    1, 'cosmo']
data.parameters['H0']           = [67.27,  50,80, 0.65,1,   'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0447,   None, None,      0.015,    1, 'cosmo']
data.parameters['n_s']          = [  0.9659,   None, None,     0.0042,    1, 'cosmo']
data.parameters['tau_reio']     = [  0.0543,  0.004, 0.08,      0.008,    1, 'cosmo']

data.parameters['parameters_smg__1']=[0.7,0.7,0.7,0,1,'cosmo']
#Non-minimal coupling xi
data.parameters['parameters_smg__2']=[0.05,0.,0.5,0.05,1,'cosmo']
data.parameters['parameters_smg__3']=[0.0,0.0,0.0,0.0,1,'cosmo']
data.parameters['parameters_smg__4']=[0.0,0.0,0.0,0,1,'cosmo']

#V_0 defined as in Eq.(9) of 2011.12934. In CLASS units the parameter \lambda in Eq.(9) simply becomes 10**(2*V_0)
data.parameters['indexg_V']=[1.5,0.6,3.5,0.1,1,'cosmo']

# Initial condition on the field. We kept the lower bound as different from zero, but for sigma=0.03 the energy injection is negligible
data.parameters['thetai_scf']=[0.5,0.03,0.9,0.1,1,'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name

data.parameters['M']	   = [-19.24, -19.5, -18.5, 0.01,  1, 'nuisance']

# Planck- hihl TT nuisance
data.parameters['A_cib_217']         = [    47.2,     0,   200,     6.2593,     1, 'nuisance']
data.parameters['cib_index']         = [    -1.3,  -1.3,  -1.3,          0,     1, 'nuisance']
data.parameters['xi_sz_cib']         = [    0.42,     0,     1,       0.33,     1, 'nuisance']
data.parameters['A_sz']              = [    7.23,     0,    10,     1.4689,     1, 'nuisance']
data.parameters['ps_A_100_100']      = [   251.0,     0,   400,     29.438,     1, 'nuisance']
data.parameters['ps_A_143_143']      = [    47.4,     0,   400,     9.9484,     1, 'nuisance']
data.parameters['ps_A_143_217']      = [    47.3,     0,   400,     11.356,     1, 'nuisance']
data.parameters['ps_A_217_217']      = [   119.8,     0,   400,     10.256,     1, 'nuisance']
data.parameters['ksz_norm']          = [    0.01,     0,    10,     2.7468,     1, 'nuisance']
data.parameters['gal545_A_100']      = [    8.86,     0,    50,     1.8928,     1, 'nuisance']
data.parameters['gal545_A_143']      = [   11.10,     0,    50,     1.8663,     1, 'nuisance']
data.parameters['gal545_A_143_217']  = [    19.8,     0,   100,     3.8796,     1, 'nuisance']
data.parameters['gal545_A_217']      = [    95.1,     0,   400,     6.9759,     1, 'nuisance']
data.parameters['galf_EE_A_100']     = [   0.055, 0.055, 0.055,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_143'] = [   0.040, 0.040, 0.040,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_217'] = [   0.094, 0.094, 0.094,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143']     = [   0.086, 0.086, 0.086,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143_217'] = [    0.21,  0.21,  0.21,          0,     1, 'nuisance']
data.parameters['galf_EE_A_217']     = [    0.70,  0.70,  0.70,          0,     1, 'nuisance']
data.parameters['galf_EE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['galf_TE_A_100']     = [   0.114,     0,    10,   0.038762,     1, 'nuisance']
data.parameters['galf_TE_A_100_143'] = [   0.134,     0,    10,   0.030096,     1, 'nuisance']
data.parameters['galf_TE_A_100_217'] = [   0.482,     0,    10,   0.086185,     1, 'nuisance']
data.parameters['galf_TE_A_143']     = [   0.224,     0,    10,   0.055126,     1, 'nuisance']
data.parameters['galf_TE_A_143_217'] = [   0.664,     0,    10,   0.082349,     1, 'nuisance']
data.parameters['galf_TE_A_217']     = [    2.08,     0,    10,    0.27175,     1, 'nuisance']
data.parameters['galf_TE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['calib_100T']        = [  999.69,     0,  3000,    0.61251, 0.001, 'nuisance']
data.parameters['calib_217T']        = [  998.16,     0,  3000,    0.63584, 0.001, 'nuisance']
data.parameters['calib_100P']        = [   1.021, 1.021, 1.021,          0,     1, 'nuisance']
data.parameters['calib_143P']        = [   0.966, 0.966, 0.966,          0,     1, 'nuisance']
data.parameters['calib_217P']        = [   1.040, 1.040, 1.040,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_100_100_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_143_143_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_217_217_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']
data.parameters['A_pol']             = [       1,     1,     1,          0,     1, 'nuisance']

# spt3g y1 part
data.parameters['Kappa'] = [0.0,-0.01,0.01,0.00045,1, 'nuisance']

data.parameters['Dl_Poisson_90x90']   =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_90x150']  =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_90x220']  =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_150x150'] =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_150x220'] =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_220x220'] =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']

data.parameters['TDust']        = [19.6, 19, 20, 0, 1, 'nuisance']
data.parameters['ADust_TE_150'] = [0.1647, 0.0, 2.0, 0.01, 1, 'nuisance']
data.parameters['BetaDust_TE']  = [1.59, 1, 2, 0, 1, 'nuisance']
data.parameters['AlphaDust_TE'] = [-2.42, -5.0, 0.0, 0.01,  1, 'nuisance']
data.parameters['ADust_EE_150'] = [0.0236, 0.0, 2.0, 0.01, 1,  'nuisance']
data.parameters['BetaDust_EE']  = [1.59, 1, 2, 0, 1, 'nuisance']
data.parameters['AlphaDust_EE'] = [-2.42, -5.0, 0.0, 0.01,  1, 'nuisance']

data.parameters['MapTcal90']  = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapTcal150'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapTcal220'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']

data.parameters['MapPcal90']  = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapPcal150'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapPcal220'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']

# Derived parameters

data.cosmo_arguments['Omega_smg'] = -1
data.cosmo_arguments['Omega_Lambda'] = 0
data.cosmo_arguments['Omega_fld'] = 0
data.cosmo_arguments['gravity_model'] = 'brans dicke'
data.cosmo_arguments['a_min_stability_test_smg'] = 0
data.cosmo_arguments['pert_initial_conditions_smg'] = 'zero'


data.parameters['100*theta_s']	   = [0, None, None, 0,  1e-9,   'derived'] 	
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['age']          = [0, None, None, 0,     1,   'derived']
data.parameters['rs_rec']          = [0, None, None, 0,     1,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['Omega_m']          = [0, None, None, 0,     1,   'derived']
data.parameters['fEDE']          = [0, None, None, 0,     1,   'derived']
data.parameters['log10z_c']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)
data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.
#data.cosmo_arguments['l_max_scalars'] = 6000

data.cosmo_arguments['xi_times_thetai_squared'] = 'yes'

#------ Mcmc parameters ----
data.N=20
data.write_step=5
