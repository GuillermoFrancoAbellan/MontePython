#------Experiments to test (separated with commas)-----
data.experiments=['Planck_highl_TTTEEE', 'Planck_lowl_EE', 'Planck_lowl_TT', 'Planck_lensing','spt3g_y1','ACTPol_lite_DR4','Pantheon','bao_boss_dr12', 'bao_smallz_2014','sh0es_Mb','KiDS_prior','DES_Y3_prior']

data.over_sampling=[1,5,5,5,5]
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]

# Cosmological parameters list

data.parameters['omega_b']      = [  2.237,    None, None,   0.015, 0.01,  'cosmo']
data.parameters['H0']           = [     71,    None, None,     0.5,    1,  'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0447,   None, None,    0.015,   1,  'cosmo']
data.parameters['n_s']          = [  0.9659,   None, None,   0.0042,   1,  'cosmo']
data.parameters['tau_reio']     = [  0.0543,  0.004, None,    0.008,   1,  'cosmo']
data.parameters['omega_cdm']    = [  0.1198,   0.05, 0.25,     0.01,   1,  'cosmo']

data.parameters['N_wzdr']       = [     0.4,   0.01, None,      0.1,   1, 'cosmo']
data.parameters['log10_zt_wzdr']= [     4.3,    4.0,  4.6,      0.2,   1, 'cosmo']
data.parameters['f_idm_wzdr']   = [    0.03,    0.0,   1.,     0.05,   1, 'cosmo']


# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['A_cib_217']         = [    47.2,     0,   200,     6.2593,     1, 'nuisance']
data.parameters['cib_index']         = [    -1.3,  -1.3,  -1.3,          0,     1, 'nuisance']
data.parameters['xi_sz_cib']         = [    0.42,     0,     1,       0.33,     1, 'nuisance']
data.parameters['A_sz']              = [    7.23,     0,    10,     1.4689,     1, 'nuisance']
data.parameters['ps_A_100_100']      = [   251.0,     0,   400,     29.438,     1, 'nuisance']
data.parameters['ps_A_143_143']      = [    47.4,     0,   400,     9.9484,     1, 'nuisance']
data.parameters['ps_A_143_217']      = [    47.3,     0,   400,     11.356,     1, 'nuisance']
data.parameters['ps_A_217_217']      = [   119.8,     0,   400,     10.256,     1, 'nuisance']
data.parameters['ksz_norm']          = [    0.01,     0,    10,     2.7468,     1, 'nuisance']
data.parameters['gal545_A_100']      = [    8.86,     0,    50,     1.8928,     1, 'nuisance']
data.parameters['gal545_A_143']      = [   11.10,     0,    50,     1.8663,     1, 'nuisance']
data.parameters['gal545_A_143_217']  = [    19.8,     0,   100,     3.8796,     1, 'nuisance']
data.parameters['gal545_A_217']      = [    95.1,     0,   400,     6.9759,     1, 'nuisance']
data.parameters['galf_EE_A_100']     = [   0.055, 0.055, 0.055,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_143'] = [   0.040, 0.040, 0.040,          0,     1, 'nuisance']
data.parameters['galf_EE_A_100_217'] = [   0.094, 0.094, 0.094,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143']     = [   0.086, 0.086, 0.086,          0,     1, 'nuisance']
data.parameters['galf_EE_A_143_217'] = [    0.21,  0.21,  0.21,          0,     1, 'nuisance']
data.parameters['galf_EE_A_217']     = [    0.70,  0.70,  0.70,          0,     1, 'nuisance']
data.parameters['galf_EE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['galf_TE_A_100']     = [   0.114,     0,    10,   0.038762,     1, 'nuisance']
data.parameters['galf_TE_A_100_143'] = [   0.134,     0,    10,   0.030096,     1, 'nuisance']
data.parameters['galf_TE_A_100_217'] = [   0.482,     0,    10,   0.086185,     1, 'nuisance']
data.parameters['galf_TE_A_143']     = [   0.224,     0,    10,   0.055126,     1, 'nuisance']
data.parameters['galf_TE_A_143_217'] = [   0.664,     0,    10,   0.082349,     1, 'nuisance']
data.parameters['galf_TE_A_217']     = [    2.08,     0,    10,    0.27175,     1, 'nuisance']
data.parameters['galf_TE_index']     = [    -2.4,  -2.4,  -2.4,          0,     1, 'nuisance']
data.parameters['calib_100T']        = [  999.69,     0,  3000,    0.61251, 0.001, 'nuisance']
data.parameters['calib_217T']        = [  998.16,     0,  3000,    0.63584, 0.001, 'nuisance']
data.parameters['calib_100P']        = [   1.021, 1.021, 1.021,          0,     1, 'nuisance']
data.parameters['calib_143P']        = [   0.966, 0.966, 0.966,          0,     1, 'nuisance']
data.parameters['calib_217P']        = [   1.040, 1.040, 1.040,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_100_100_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_143_143_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_cnoise_e2e_217_217_EE'] = [ 1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_TT'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_100_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_100_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_143_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_143_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_sbpx_217_217_EE'] = [       1,     1,     1,          0,     1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']
data.parameters['A_pol']             = [       1,     1,     1,          0,     1, 'nuisance']

###JLA Nuisance parameters
data.parameters['M']       = [-19.24, -19.5, -18.5, 0.01,  1, 'nuisance']

#ACT nuisance
data.parameters['yp2']         = [0.97,    0.9, 1.1,   0.015, 1,  'nuisance']

# spt3g y1 part
data.parameters['Kappa'] = [0.0,-0.01,0.01,0.00045,1, 'nuisance']

data.parameters['Dl_Poisson_90x90']   =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_90x150']  =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_90x220']  =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_150x150'] =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_150x220'] =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']
data.parameters['Dl_Poisson_220x220'] =   [0.1, 0.0, 5.0, 0.01, 1, 'nuisance']

data.parameters['TDust']        = [19.6, 19, 20, 0, 1, 'nuisance']
data.parameters['ADust_TE_150'] = [0.1647, 0.0, 2.0, 0.01, 1, 'nuisance']
data.parameters['BetaDust_TE']  = [1.59, 1, 2, 0, 1, 'nuisance']
data.parameters['AlphaDust_TE'] = [-2.42, -5.0, 0.0, 0.01,  1, 'nuisance']
data.parameters['ADust_EE_150'] = [0.0236, 0.0, 2.0, 0.01, 1,  'nuisance']
data.parameters['BetaDust_EE']  = [1.59, 1, 2, 0, 1, 'nuisance']
data.parameters['AlphaDust_EE'] = [-2.42, -5.0, 0.0, 0.01,  1, 'nuisance']

data.parameters['MapTcal90']  = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapTcal150'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapTcal220'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']

data.parameters['MapPcal90']  = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapPcal150'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']
data.parameters['MapPcal220'] = [1.0, 0.85, 1.15, 0.01, 1, 'nuisance']

# Derived parameters
data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_m']         = [0, None, None, 0,     1,   'derived']
#data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)
#data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05

#SPARTACOUS parameters
data.cosmo_arguments['rg_wzdr']      = 1.75
data.cosmo_arguments['g2_wzdr']      = 2
data.cosmo_arguments['m_idm_wzdr'] = 1.e12
data.cosmo_arguments['alpha_d']    = 1.e-4
data.cosmo_arguments['spinstat_wzdr']  = -1
data.cosmo_arguments['use_rate_spartacous']  = 'yes'
data.cosmo_arguments['include_cs2_idm_wzdr'] = 'no'
data.cosmo_arguments['use_wzdr_PSD'] = 'no'
data.cosmo_arguments['gauge'] = 'newtonian'

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

# The Planck Lensing likelihood is more precise when the non-linear effects are taken
# into consideration. For this you can use halofit (default) or hmcode.
# If you are running an exotic model for which the non-linearities cannot be
# computed with either of these codes, you are advised to comment out the following line.
data.cosmo_arguments['non linear'] = 'halofit'


#------ Mcmc parameters ----

data.N=10
data.write_step=5
