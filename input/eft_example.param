#------Experiments to test (separated with commas)-----

data.experiments=['eft_boss_cmass_bao','eft_boss_lowz_bao']


#------ Settings for the over-sampling.
data.over_sampling=[1, 5, 5]


#------ Parameter list -------

#LCDM parameters

data.parameters['omega_b']   = [2.233, 2.0, 2.4, 0.015, 0.01, 'cosmo']
data.parameters['omega_cdm']	= [0.120, 0.05, 0.25, 0.003, 1, 'cosmo']
data.parameters['h'] = [0.6777, 0.5, 0.85, 0.03, 1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [3.044, 2., 4., 0.1, 1, 'cosmo']
data.parameters['n_s'] = [0.965, 0.5, 1.5, 0.0042, 1,   'cosmo']
#data.parameters['Omega_k']   = [  0.0,  -0.5, 0.5,   0.05,   1, 'cosmo']
#data.parameters['w0_fld']      = [ -1.0, -1.2, 0., 0.05, 1, 'cosmo']
#data.parameters['w0_fld']      = [None, None, None, 0.05, 1, 'cosmo']
#data.parameters['N_ur'] = [2.0328, None, None, 0.05, 1,   'cosmo']
#data.parameters['m_ncdm'] = [0.06, 0., 1., 0.005, 1,   'cosmo']
#data.parameters['M_tot_NH']     = [.2, 0.06, 1.5, 0.02, 1, 'cosmo']
#data.parameters['M_tot_IH']     = [.2, 0.11, 1.5, 0.02, 1, 'cosmo']


#Nuisance paramters

data.parameters['b1_hN']  = [2, 0, 4, 0.5, 1,  'nuisance']
data.parameters['c2_hN']  = [1.5, -4, 4, 0.5, 1,  'nuisance']
data.parameters['b1_hS']  = [2, 0, 4, 0.5, 1,  'nuisance']
data.parameters['c2_hS']  = [1.5, -4, 4, 0.5, 1,  'nuisance']

data.parameters['b1_lN']  = [2, 0, 4, 0.5, 1,  'nuisance']
data.parameters['c2_lN']  = [1.5, -4, 4, 0.5, 1,  'nuisance']
data.parameters['b1_lS']  = [2, 0, 4, 0.5, 1,  'nuisance']
data.parameters['c2_lS']  = [1.5, -4, 4, 0.5, 1,  'nuisance']



# Derived parameters

data.parameters['Omega_m']    = [0, None, None, 0,     1,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']          = [0, None, None, 0,     1,   'derived']
#data.parameters['Omega0_fld']    = [1, None, None, 0,     1,   'derived']

#data.cosmo_arguments['Omega_Lambda'] = 0

data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06

#data.cosmo_arguments['N_ncdm']  = 3
#data.cosmo_arguments['N_ur']    = 0.00641

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#------ Mcmc parameters ----

data.N=10
data.write_step=5
