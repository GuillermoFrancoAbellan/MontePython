#------Experiments to test (separated with commas)-----

data.experiments=['Planck_highl_TTTEEE_lite', 'Planck_lowl_EE', 'Planck_lowl_TT','Planck_lensing','bao_smallz_2014','bao_fs_boss_dr12','Pantheon', 'S8_DESY1']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
data.over_sampling=[1, 10, 10]



#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['Log10_Gamma_dcdm']    = [1,-0.9999, 4,1,    1, 'cosmo']
data.parameters['log10_epsilon_dcdm']    = [-1,-3, -0.3011, 1,    1, 'cosmo']
#data.parameters['epsilon_dcdm']    = [0.1,0.001, 0.4999,0.1,    1, 'cosmo']
data.parameters['omega_b']   = [2.2377, None, None, 0.015, 0.01,'cosmo']
data.parameters['Omega_ini_dcdm2']  = [0.3,  0.00001, 0.99999, 0.015,  1, 'cosmo']
data.parameters['H0']      = [70, 50,90, 1,1,  'cosmo']
data.parameters['n_s']     = [0.9659, None, None, 0.0042, 1,  'cosmo']
data.parameters['ln10^{10}A_s']     = [3.0447,  None, None, 0.015, 1,'cosmo']
data.parameters['tau_reio']   = [0.0543, 0.004,None, 0.008,1,  'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['M']       = [-19.02, -19.5, -18.5, 0.004,  1, 'nuisance']
data.parameters['A_planck']          = [ 1.00061,   0.9,   1.1,     0.0025,     1, 'nuisance']

# Derived parameters

data.parameters['rs_rec']          = [0, None, None, 0,     1,   'derived']
data.parameters['100*theta_s']          = [0, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']          = [0, None, None, 0,     1,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']
# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
#data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['log10_epsilon_dcdm'] = -0.3011
data.cosmo_arguments['output'] = 'tCl, pCl, lCl, mPk'
data.cosmo_arguments['lensing'] = 'yes'
data.cosmo_arguments['l_max_scalars'] =2600
data.cosmo_arguments['omega_cdm'] = 0.00001
data.cosmo_arguments['M_dcdm'] = 1
data.cosmo_arguments['N_ncdm'] = 2
data.cosmo_arguments['N_ur'] = 2.038
data.cosmo_arguments['m_ncdm'] = '0.06,0'  
data.cosmo_arguments['background_ncdm_distribution'] ='0,1'
data.cosmo_arguments['Quadrature strategy'] ='0,4'
data.cosmo_arguments['evolver'] = 0
data.cosmo_arguments['ncdm_fluid_trigger_tau_over_tau_k'] = 25
data.cosmo_arguments['ncdm_fluid_approximation'] = 2
data.cosmo_arguments['Number of momentum bins perturbs'] ='50,300'
data.cosmo_arguments['massive_daughter_perturbations'] = 'yes'
data.cosmo_arguments['dark_radiation_perturbations'] = 'yes'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#data.cosmo_arguments['input_verbose'] = 3 
#data.cosmo_arguments['background_verbose'] = 3
#data.cosmo_arguments['thermodynamics_verbose'] = 3
#data.cosmo_arguments['perturbations_verbose'] = 3
#data.cosmo_arguments['transfer_verbose'] = 3
#data.cosmo_arguments['primordial_verbose'] = 3
#data.cosmo_arguments['spectra_verbose'] = 3
#data.cosmo_arguments['nonlinear_verbose'] = 3
#data.cosmo_arguments['lensing_verbose'] = 3
#data.cosmo_arguments['output_verbose'] = 3



#------ Mcmc parameters ----

data.N=10
data.write_step=5
